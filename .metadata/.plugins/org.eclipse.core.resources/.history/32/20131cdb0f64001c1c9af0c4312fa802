package com.springboot.app.oauth.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;
import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;
import org.springframework.security.oauth2.provider.token.AccessTokenConverter;
import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;

@Configuration
@EnableAuthorizationServer
public class AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter {
	
	// authenticationManager debe ser registrado en el AuthorizationServerConfigurerAdapter
	
	@Override
	public void configure(AuthorizationServerSecurityConfigurer security) throws Exception {
		// TODO Auto-generated method stub
		super.configure(security);
	}
	@Override
	public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
		// TODO Auto-generated method stub
		super.configure(clients);
	}
	
	//AQUÍ SE CONFIGURA EL AuthenticationManager. TAMBN EL TOKEN STORAGE QUE ES DEL TIPO JWT Y TAMBN EL CONVERTER QUE GUARDA LOS DATOS DEL USUARIO EN EL TOKEN
	@Override
	public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {
		//REGISTRO DE AuthenticationManager
		endpoints.authenticationManager(authenticationManager).accessTokenConverter(accessTokenConverter());
		
	}
	
	public JwtAccessTokenConverter accessTokenConverter() {
		JwtAccessTokenConverter tokenConverter = new JwtAccessTokenConverter();
		//SE AGREGA CÓDIGO SECRETO QUE ES PARA LA FIRMA DEL TOKEN
		tokenConverter.setSigningKey("algún_código_secreto");
		return tokenConverter;
	}

	@Autowired
	private BCryptPasswordEncoder passwordEncoder;
	@Autowired
	private AuthenticationManager authenticationManager;
}
